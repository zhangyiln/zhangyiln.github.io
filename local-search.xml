<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>数据结构和算法</title>
    <link href="/2023/03/02/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/"/>
    <url>/2023/03/02/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>这是篇介绍<strong>我自己了解</strong>的数据结构和算法的博客，有些知识可能没那么准确</p><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><ul><li>数据：描述事物的基本符号，是能被计算机识别，并输入计算机处理的符号集合</li><li>数据元素：组成数据的，有一定意义的基本单位</li><li>数据项：数据不可分隔的最小单位</li><li>数据对象：有相同性质的一类元素的集合</li><li>数据结构：相互之间存在一种或多种特定关系的数据元素的集合</li></ul><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><ul><li>数据类型：是指一组性质相同的值的集合及定义在此集合上的一些操作的总称</li><li>对高级语言开发者来说，他们不关心这些数据类型如何实现，只关心应用，所以我们可以把数据类型抽象出来，抽象就是抽取出事物的普遍性的本质。</li><li>抽象数据类型：指一个数学模型及定义在该模型上的一组操作</li></ul><h2 id="结构的分类"><a href="#结构的分类" class="headerlink" title="结构的分类"></a>结构的分类</h2><ul><li>逻辑结构<ul><li>集合 （除了同属一个集合，没其他关系）</li><li>线性 （一对一）</li><li>树形 （一对多）</li><li>图形 （多对多）</li></ul></li><li>物理结构（储存结构）<ul><li>顺序 （连续且在同一片区域）</li><li>链式 （不在同一片区域）</li></ul></li></ul><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><ul><li>算法：解决特定问题求解步骤的描述，计算机中表现为指令的有限序列<ul><li>特性：输入，输出，有穷，确定，可行</li><li>算法效率的度量方法<ul><li>事后统计法（在计算机上执行，不推荐）</li><li>事前统计法（推荐）</li></ul></li><li>判断算法效率时，常数以及其他次要项可忽略，更应关注最高项</li><li>时间复杂度<ul><li>T(n)&#x3D;O(f(n))，这个式子表示，随n的增大，算法时间增长率与f(n)的增长率相同</li><li>大O记法：<ul><li>1.用1取代所有加法常数</li><li>2.次数只保留最高阶</li><li>3.若最高阶存在且不为1，去除与最高阶相乘的常数</li></ul></li><li>耗费时间大小：O(n^n) &gt; O(n!) &gt; O(2^n) &gt; O(n^3) &gt; O(n^2) &gt; O(nlogn) &gt; O(n) &gt; O(logn) &gt; O(1)</li></ul></li><li>空间复杂度（用的较少，我不想做解释😂）</li></ul></li></ul><h2 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h2><ul><li>定义：零个或多个元素的有限序列</li><li>解释：有且只有一个后继和前驱</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//抽象</span><br>ADT 线性表（<span class="hljs-built_in">list</span>）<br>    Data<br>    <span class="hljs-comment">// 线性表的数据对象集合为&#123;a1,a2,......,an&#125;,每个元素的类型均为DataType.除第一个元素，每个元素有且只有一个前驱元素，除最后一个元素，每个元素有且只有一个后继元素，元素之间一一对应。</span><br>    Operation  <br>    <span class="hljs-title function_">InitList</span><span class="hljs-params">(*L)</span> <span class="hljs-comment">//初始化操作，建立一个空的线性表</span><br>    <span class="hljs-title function_">ListEmpty</span><span class="hljs-params">(L)</span> <span class="hljs-comment">//线性表为空返回true，否则返回false</span><br>    <span class="hljs-title function_">ClearList</span><span class="hljs-params">(*L)</span> <span class="hljs-comment">//清空线性表</span><br>    <span class="hljs-title function_">GetEle</span><span class="hljs-params">(L,i,*e)</span> <span class="hljs-comment">//将线性表L中的第i个元素返回给e</span><br>    <span class="hljs-title function_">LoaclEle</span><span class="hljs-params">(L,e)</span> <span class="hljs-comment">//在线性表中查找与给定值e相同的元素，如果查找成功，返回元素在  表中序号，否则返回0</span><br>    <span class="hljs-title function_">ListInsert</span><span class="hljs-params">(*L,i,e)</span> <span class="hljs-comment">//在线性表L中的第i个位置插入元素e</span><br>    <span class="hljs-title function_">ListDelete</span><span class="hljs-params">(*L,i,e)</span> <span class="hljs-comment">//删除线性表L中的第i个元素，返回e代表其值</span><br>    <span class="hljs-title function_">ListLength</span><span class="hljs-params">(L)</span> <span class="hljs-comment">//返回线性表L中元素的个数    </span><br><br>endADT<br><span class="hljs-comment">// 对于不同的应用，线性表的基本操作是不同的，对实际问题的复杂操作，可以通过基本操作的组合来实现。 </span><br></code></pre></td></tr></table></figure><ul><li><p>实现：可用顺序储存结构和链式存储结构来实现</p></li><li><p>分类：</p><ul><li><p>线性表的顺序储存结构（数组和顺序表）</p><ul><li><p>指用一段地址连续的储存单元依次存储线性表的数据元素</p></li><li><p>可以用C语言的一维数组来实现线性表的顺序储存结构</p></li><li><p>代码实现</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAxSIZE 20 <span class="hljs-comment">// 存储空间初始分配量</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> EleType; <span class="hljs-comment">// 类型根据实际情况而定，这里假设为int</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span><br>    EleType data [MAXSIZE];<br>    <span class="hljs-type">int</span> length;<br>&#125;SqList;<br><span class="hljs-comment">// 通过以上代码。我们可以发现顺序存储结构需要三个属性：</span><br><span class="hljs-comment">// 1.存储空间的起始位置：数组data，它的位置就是存储空间的位置</span><br><span class="hljs-comment">// 2.线性表的最大存储容量：数组长度</span><br><span class="hljs-comment">// 3.线性表的当前长度：length</span><br><br><span class="hljs-comment">//初始化一个顺序线性表</span><br>SqList <span class="hljs-built_in">list</span>;<br><span class="hljs-built_in">list</span>.length = <span class="hljs-number">0</span>;<br><span class="hljs-comment">// 初始化的线性表为空表，可以对其插入元素，或对已有元素进行访问</span><br></code></pre></td></tr></table></figure><ul><li>数组长度与线性表长度的区别<ul><li>数组长度式存放线性表的存储空间的长度，分配后一般不变</li><li>线性表式线性表中数据元素的个数，随线性表的插入和删除操作而变化</li></ul></li></ul></li><li><p>地址计算</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">LOC(ai+<span class="hljs-number">1</span>)=LOC(ai)+c<br>LOC(ai)=LOC(ai)+(i<span class="hljs-number">-1</span>)*c<br></code></pre></td></tr></table></figure><p>由此可以得出，对线性表每个位置的存入或取出数据，对计算机都是相等的时间，也就是一个常数。<br>​ 我们通常把具有这一特定的存储结构称为随机存取结构</p><ul><li><p>插入与删除</p><ul><li>获取元素（代码实现）</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> OK 1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ERROR 0</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> TRUE 1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> FALSE 0</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> Status;<br><span class="hljs-comment">// Status是函数的类型,返回值时状态代码，如OK等</span><br><span class="hljs-comment">// 初始条件：顺序线性表L已存在，1&lt;=i&lt;=ListLength(L)</span><br><span class="hljs-comment">// 操作结果：用e返回L中得i个元素的值</span><br><span class="hljs-comment">// 最后一个参数用指针的原因：C语言中，返回值只能返回一次，</span><br><span class="hljs-comment">// 不能同时返回多个值，所以要用指针，将获取到的元素值存储</span><br><span class="hljs-comment">// 到指针指向的内存空间中，</span><br>Status <span class="hljs-title function_">GetEle</span><span class="hljs-params">(SqList L,<span class="hljs-type">int</span> i,EleType *e)</span>&#123;<br>    <span class="hljs-keyword">if</span>(L.length==<span class="hljs-number">0</span> || i&gt;L.length)&#123;<br>        <span class="hljs-keyword">return</span> ERROR:<br>    &#125;<br>    *e=L.data[i<span class="hljs-number">-1</span>];<br>    <span class="hljs-keyword">return</span> OK:<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>插入</p><ul><li>思路：<ul><li>插入位置不合理，抛出异常</li><li>若线性表长度大于等于数组长度，抛出异常或动态增加容量</li><li>从最后一个元素开始向前遍历到第i个位置，分别将它们向后移动一个位置</li><li>将要插入元素填入位置i处</li><li>表长加一</li></ul></li><li>代码实现</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//关于第一个参数为什么是指针：C语言中，如果想在函数内部修改函数外部的数据，</span><br><span class="hljs-comment">//需要传递该数据的地址作为参数，插入函数改变了数据，</span><br><span class="hljs-comment">//因此需要将顺序表的地址作为参数传递，如果不传递指针作为参数，</span><br><span class="hljs-comment">//而是直接传递副本，则修改的只是副本，不会影响函数外部的数据</span><br>Status <span class="hljs-title function_">ListInsert</span><span class="hljs-params">(SqList *L,<span class="hljs-type">int</span> i,EleType e)</span>&#123;<br>    <span class="hljs-type">int</span> k;<br>    <span class="hljs-keyword">if</span>(L.length==MAXSIZE)&#123;<span class="hljs-comment">//线性表已满</span><br>        <span class="hljs-keyword">return</span> ERROR;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(i&lt;<span class="hljs-number">1</span> || i&gt;L.length+<span class="hljs-number">1</span>)&#123;<span class="hljs-comment">//i不在范围</span><br>        <span class="hljs-keyword">return</span> ERROR;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(i&lt;=L.length<span class="hljs-number">-1</span>)&#123;<span class="hljs-comment">//插入位置不在表尾</span><br>        <span class="hljs-keyword">for</span>(k=L.length<span class="hljs-number">-1</span>;k&gt;=i<span class="hljs-number">-1</span>;k--)&#123; <span class="hljs-comment">//位置后移</span><br>            L.data[k+<span class="hljs-number">1</span>]=L.data[k];<br>        &#125;<br>    &#125;<br>    L.data[i<span class="hljs-number">-1</span>]=e; <span class="hljs-comment">//插入新元素</span><br>    L.length++;<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>删除</p><ul><li>思路：<ul><li>删除位置不合理，抛出异常</li><li>取出删除元素</li><li>从删除元素位置遍历到最后，分别将他们向前移动一个位置</li><li>表长减一</li></ul></li><li>代码实现</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c">Status <span class="hljs-title function_">ListDelete</span><span class="hljs-params">(SqList *L,<span class="hljs-type">int</span> i,ELeType *e)</span>&#123;<br>    <span class="hljs-type">int</span> k;<br>    <span class="hljs-keyword">if</span>(L.length==<span class="hljs-number">0</span>)&#123;<span class="hljs-comment">//线性表为空</span><br>        <span class="hljs-keyword">return</span> ERROR;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(i&lt;<span class="hljs-number">1</span> || i&gt;L.length)&#123;<span class="hljs-comment">//i不在范围</span><br>        <span class="hljs-keyword">return</span> ERROR;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(i&lt;=L.length)&#123;<span class="hljs-comment">//删除位置不在表尾</span><br>        *e =L.data[i<span class="hljs-number">-1</span>];      <span class="hljs-comment">//保存被删除元素</span><br>        <span class="hljs-keyword">for</span>(k=i;k&lt;L.length;k++)&#123; <span class="hljs-comment">//位置前移</span><br>            L.data[k<span class="hljs-number">-1</span>]=L.data[k];<br>        &#125;<br>    &#125;<br>    L.length--;<br>    <span class="hljs-keyword">return</span> OK；<br>&#125;<br><span class="hljs-comment">// 该函数执行完毕后，若返回值为OK,被删除的元素保存在e指向的内存中</span><br><span class="hljs-comment">// 需要注意的是，指针指向的内存空间，需要在函数调用前分配好</span><br></code></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>顺序存储结构优缺点</p><ul><li>优点：无需为元素之间的逻辑关系增加额外的存储空间，速度快</li><li>缺点：插入和删除需要移动大量元素</li></ul></li></ul></li><li><p>线性表的链式存储结构</p><ul><li><p>用一组任意的存储单元存储线性表的数据元素，存储单元可连续也可不连续。除了要储存元素，还要存储后继元素的内存地址。</p></li><li><p>把存储信息的域称为数据域，把存储地址的域称为指针域，这两部分组成链表的一个元素，称为节点。N个节点链接成一个链表。因链表中节点只有一个指针域，所以叫单链表。</p></li><li><p>链表中第一个节点的存储位置叫头指针，为了方便操作（对第一节点前插入和删除节点，其操作与其他节点操作统一），会在单链表的第一个节点前附设一个节点，叫头结点。头结点的数据域可以存储线性表长度等公共信息。最后一个节点指针域为空。</p></li><li><p>若线性表为空，则头结点的指针域为空。</p></li><li><p><img src="https://typora-iamge.oss-cn-beijing.aliyuncs.com/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-03-04%20172046.png"></p></li><li><p>代码实现</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span>&#123;</span> <br>  EleType data;<br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> *<span class="hljs-title">next</span>;</span><br>&#125; Node;<br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> *<span class="hljs-title">LinkList</span>;</span>  <span class="hljs-comment">// 定义LinkList</span><br><span class="hljs-comment">// 初始化</span><br>LinkList <span class="hljs-title function_">list</span> <span class="hljs-params">()</span>&#123;<br>    <span class="hljs-comment">// 创建头节点</span><br>    LinkList L = (LinkList)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(Node));<br>    <span class="hljs-keyword">if</span>(!L)&#123;<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>); <span class="hljs-comment">// 内存分配失败</span><br>    &#125;<br>    L.next = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">return</span> L;<br>&#125;<br><span class="hljs-comment">// 返回的L就是头结点，也就是一个空链表</span><br><span class="hljs-comment">// 可以插入元素来增加链表元素</span><br></code></pre></td></tr></table></figure></li><li><p>单链表读取</p><ul><li>在单链表中，由于无法直接知道第i个元素在哪儿，所以要从头开始找。</li><li>算法思路：<ul><li>声明一个节点p指向链表第一个结点，初始化j从1开始</li><li>当j&lt;i时，就遍历链表，让p的指针向后移动，不断指向下一结点，j累加1</li><li>若到链表末尾为空，则说明第i个元素不存在</li><li>否则查找成功，返回结点p的数据</li></ul></li><li>代码实现：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c">Status <span class="hljs-title function_">GetEle</span><span class="hljs-params">(LinkList L,<span class="hljs-type">int</span> i,EleType *e)</span>&#123;<br>    <span class="hljs-type">int</span> j;<br>    LinkList p; <span class="hljs-comment">// 声明一结点p</span><br>    p = L.next <span class="hljs-comment">// 让p指向链表L的第一个结点，L是头结点</span><br>    j = <span class="hljs-number">1</span>; <span class="hljs-comment">// j为计数器</span><br>    <span class="hljs-keyword">while</span> (p &amp;&amp; J&lt;<span class="hljs-number">1</span>)&#123;  <span class="hljs-comment">// p不为空或者计数器j还没有等于i时，循环继续</span><br>        p = p.next; <span class="hljs-comment">// 让p指向下一结点</span><br>        ++j;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(!p || j&gt;i)&#123;<br>        <span class="hljs-keyword">return</span> ERROR; <span class="hljs-comment">// 第i个元素不存在</span><br>    &#125;<br>    *e = p.data; <span class="hljs-comment">// 取第i个元素的数据</span><br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br><span class="hljs-comment">// 由于单链表没有定义表长，所以不知道要循环多少次，所以不方便用for循环。</span><br><span class="hljs-comment">// 核心思想就是“工作指针后移”</span><br></code></pre></td></tr></table></figure></li><li><p>单链表的插入</p><ul><li><p><img src="https://typora-iamge.oss-cn-beijing.aliyuncs.com/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-03-04%20161107.png"></p></li><li><p><code>s.next = p.next; p.next = s;</code><font color="red">千万注意这两句的顺序不能调换</font></p></li><li><p>算法思路：</p><p><img src="https://typora-iamge.oss-cn-beijing.aliyuncs.com/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-03-02%20164421.png"></p></li><li><p>代码实现：</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c">Status <span class="hljs-title function_">ListInsert</span><span class="hljs-params">(LinkList *L,<span class="hljs-type">int</span> i,EleType e)</span>&#123;<br>    <span class="hljs-type">int</span> j;<br>    LinkList p,s;<br>    p = *L;<br>    j = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(p &amp;&amp; j &lt; i)&#123;<br>        p = p.next;<br>        ++j;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(!p || j&gt;<span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">return</span> ERROR:<br>    &#125;<br>    s = (LinkList)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(Node));<br>    s.data = e;<br>    s.next = p.next;<br>    p.next = s;<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>单链表的删除</p><ul><li>有三个结点。结点p,结点q或<code>p.next</code>,结点<code>q.next</code>或<code>p.next.next</code>,我们要做的就是<code>q=p.next; p.next=q.next;</code></li><li>代码思路：<ul><li>声明一节点p指向链表第一个结点，初始化j从1开始</li><li>当j&lt;1时，就遍历链表，让p的指针向后移动，不断指向下一结点，j累加1</li><li>若到链表末尾p为空，则说明第i个元素不存在</li><li>否则查找成功，将与删除的结点<code>p.next</code>赋值给q</li><li>单链表的删除标准语句<code>p.next = q.next</code></li><li>将q结点中的数据赋值给e,作为返回值</li><li>释放q结点</li><li>返回成功</li></ul></li><li>代码实现：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c">Status <span class="hljs-title function_">ListDelete</span> <span class="hljs-params">(LinkList *L,<span class="hljs-type">int</span> i, EleType *e)</span>&#123;<br>    <span class="hljs-type">int</span> i;<br>    p = *L;<br>    j = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(p.next &amp;&amp; j &lt; i)&#123;<br>        p = p.next;<br>        ++j;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(!(p.next) || j &gt;i)&#123;<br>        <span class="hljs-keyword">return</span> ERROR:<br>    &#125;<br>    q = p.next;<br>    p.next = q.next;<br>    *e = q.data;<br>    <span class="hljs-built_in">free</span>(q);<br>    <span class="hljs-keyword">return</span> OK;<br>&#125;<br></code></pre></td></tr></table></figure></li><li></li></ul></li></ul></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>-知识总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>测试文章</title>
    <link href="/2023/02/15/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/"/>
    <url>/2023/02/15/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<p>这是一篇测试文章</p>]]></content>
    
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/02/15/hello-world/"/>
    <url>/2023/02/15/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
